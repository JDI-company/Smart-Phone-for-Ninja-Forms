/*! For license information please see main.min.js.LICENSE.txt */
(()=>{var __webpack_modules__={"./public/js/ninja-forms-spn-addon-public.js":()=>{eval("function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n/**\n * Ninja Forms SPN Addon Public JavaScript Code (Front-end)\n *\n * @since 1.0.0\n */\n\n/* eslint no-extend-native: [\"error\", { \"exceptions\": [\"Array\"] }] */\nArray.prototype.remove = function (value) {\n  return this.filter(function (element) {\n    return element !== value;\n  });\n};\nvar $ = jQuery;\n\n// Get All Countries Codes from intTelInput\nvar allCountries = _toConsumableArray(window.intlTelInputGlobals.getCountryData());\n\n// Set All ISO2 codes\nvar codesISO2 = allCountries.map(function (country) {\n  return country.iso2;\n});\n\n// Set European ISO2 codes\nvar codesISO2European = ['al', 'ad', 'at', 'by', 'be', 'ba', 'bg', 'hr', 'cz', 'dk', 'ee', 'fo', 'fi', 'fr', 'de', 'gi', 'gr', 'va', 'hu', 'is', 'ie', 'it', 'lv', 'li', 'lt', 'lu', 'mk', 'mt', 'md', 'mc', 'me', 'nl', 'no', 'pl', 'pt', 'ro', 'ru', 'sm', 'rs', 'sk', 'si', 'es', 'se', 'ch', 'ua', 'gb'];\nfunction formSettings() {\n  'use strict';\n\n  $(window).on('load', function () {\n    $('.nf-field-container.spn-container input').each(function () {\n      var $input = $(this);\n      var onlyCountries = $input.data('only-countries').split(',');\n      if (onlyCountries.includes('all')) {\n        onlyCountries = codesISO2;\n      } else if (onlyCountries.includes('european')) {\n        onlyCountries = onlyCountries.remove('european');\n        onlyCountries = onlyCountries.concat(codesISO2European);\n      }\n      var preferredCountries = $input.data('preffered-countries').split(',');\n      var defaultCountry = $input.data('default-country');\n      var allowDropdown = Boolean($input.data('allow-dropdown'));\n      var nationalMode = Boolean($input.data('national-mode'));\n      var autoHideDialCode = Boolean($input.data('auto-hide-dial-code'));\n      var excludeCountries = $input.data('exclude-countries');\n      if (excludeCountries) {\n        excludeCountries = excludeCountries.split(',');\n      }\n      var allowIpLookUp = Boolean($input.data('allow-ip-lookup'));\n      if (allowIpLookUp) {\n        allowIpLookUp = function allowIpLookUp(success, failure) {\n          $.get('https://ipinfo.io', function () {}, 'jsonp').always(function (resp) {\n            var countryCode = resp && resp.country ? resp.country : defaultCountry;\n            success(countryCode);\n          });\n        };\n        defaultCountry = 'auto';\n      } else {\n        allowIpLookUp = null;\n      }\n      var separateDialCode = Boolean($input.data('separate-dial-code'));\n      var formatOnDisplay = Boolean($input.data('format-on-display'));\n      $input.intlTelInput({\n        initialCountry: defaultCountry,\n        preferredCountries: preferredCountries,\n        onlyCountries: onlyCountries,\n        allowDropdown: allowDropdown,\n        nationalMode: nationalMode,\n        autoHideDialCode: autoHideDialCode,\n        excludeCountries: excludeCountries,\n        geoIpLookup: allowIpLookUp,\n        separateDialCode: separateDialCode,\n        formatOnDisplay: formatOnDisplay,\n        utilsScript: '../../vendor/intl-tel-input-master/build/js/utils.js'\n      });\n    });\n  });\n}\nformSettings();\n\n//# sourceURL=webpack://nf-spn-addon/./public/js/ninja-forms-spn-addon-public.js?")}},__webpack_exports__={};__webpack_modules__["./public/js/ninja-forms-spn-addon-public.js"]()})();